// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OfflineServer.proto

#include "OfflineServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ik_OfflineServer {
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class WriteOfflineRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteOfflineRequest> _instance;
} _WriteOfflineRequest_default_instance_;
class ReadOfflineRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadOfflineRequest> _instance;
} _ReadOfflineRequest_default_instance_;
class ReadOfflineResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadOfflineResponse> _instance;
} _ReadOfflineResponse_default_instance_;
}  // namespace ik_OfflineServer
static void InitDefaultsscc_info_ReadOfflineRequest_OfflineServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ik_OfflineServer::_ReadOfflineRequest_default_instance_;
    new (ptr) ::ik_OfflineServer::ReadOfflineRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ik_OfflineServer::ReadOfflineRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadOfflineRequest_OfflineServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadOfflineRequest_OfflineServer_2eproto}, {}};

static void InitDefaultsscc_info_ReadOfflineResponse_OfflineServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ik_OfflineServer::_ReadOfflineResponse_default_instance_;
    new (ptr) ::ik_OfflineServer::ReadOfflineResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ik_OfflineServer::ReadOfflineResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadOfflineResponse_OfflineServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadOfflineResponse_OfflineServer_2eproto}, {}};

static void InitDefaultsscc_info_Request_OfflineServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ik_OfflineServer::_Request_default_instance_;
    new (ptr) ::ik_OfflineServer::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ik_OfflineServer::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_OfflineServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_OfflineServer_2eproto}, {}};

static void InitDefaultsscc_info_WriteOfflineRequest_OfflineServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ik_OfflineServer::_WriteOfflineRequest_default_instance_;
    new (ptr) ::ik_OfflineServer::WriteOfflineRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ik_OfflineServer::WriteOfflineRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteOfflineRequest_OfflineServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteOfflineRequest_OfflineServer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OfflineServer_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OfflineServer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OfflineServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OfflineServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::Request, type_),
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::Request, request_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::WriteOfflineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::WriteOfflineRequest, friend_id_),
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::WriteOfflineRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::ReadOfflineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::ReadOfflineRequest, myid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::ReadOfflineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ik_OfflineServer::ReadOfflineResponse, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ik_OfflineServer::Request)},
  { 7, -1, sizeof(::ik_OfflineServer::WriteOfflineRequest)},
  { 14, -1, sizeof(::ik_OfflineServer::ReadOfflineRequest)},
  { 20, -1, sizeof(::ik_OfflineServer::ReadOfflineResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ik_OfflineServer::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ik_OfflineServer::_WriteOfflineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ik_OfflineServer::_ReadOfflineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ik_OfflineServer::_ReadOfflineResponse_default_instance_),
};

const char descriptor_table_protodef_OfflineServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023OfflineServer.proto\022\020ik_OfflineServer\""
  ",\n\007Request\022\014\n\004type\030\001 \001(\014\022\023\n\013request_msg\030"
  "\002 \001(\014\"5\n\023WriteOfflineRequest\022\021\n\tfriend_i"
  "d\030\001 \001(\005\022\013\n\003msg\030\002 \001(\014\"\"\n\022ReadOfflineReque"
  "st\022\014\n\004myid\030\001 \001(\005\"\"\n\023ReadOfflineResponse\022"
  "\013\n\003msg\030\001 \003(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OfflineServer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OfflineServer_2eproto_sccs[4] = {
  &scc_info_ReadOfflineRequest_OfflineServer_2eproto.base,
  &scc_info_ReadOfflineResponse_OfflineServer_2eproto.base,
  &scc_info_Request_OfflineServer_2eproto.base,
  &scc_info_WriteOfflineRequest_OfflineServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OfflineServer_2eproto_once;
static bool descriptor_table_OfflineServer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OfflineServer_2eproto = {
  &descriptor_table_OfflineServer_2eproto_initialized, descriptor_table_protodef_OfflineServer_2eproto, "OfflineServer.proto", 220,
  &descriptor_table_OfflineServer_2eproto_once, descriptor_table_OfflineServer_2eproto_sccs, descriptor_table_OfflineServer_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_OfflineServer_2eproto::offsets,
  file_level_metadata_OfflineServer_2eproto, 4, file_level_enum_descriptors_OfflineServer_2eproto, file_level_service_descriptors_OfflineServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OfflineServer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OfflineServer_2eproto), true);
namespace ik_OfflineServer {

// ===================================================================

void Request::InitAsDefaultInstance() {
}
class Request::_Internal {
 public:
};

Request::Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_OfflineServer.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  request_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_msg().empty()) {
    request_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_msg_);
  }
  // @@protoc_insertion_point(copy_constructor:ik_OfflineServer.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_OfflineServer_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ik_OfflineServer.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_OfflineServer_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_OfflineServer.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes request_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_OfflineServer.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes type = 1;
  if (this->type().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes request_msg = 2;
  if (this->request_msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_request_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_OfflineServer.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_OfflineServer.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_type());
  }

  // bytes request_msg = 2;
  if (this->request_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_request_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_OfflineServer.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_OfflineServer.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_OfflineServer.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_OfflineServer.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.request_msg().size() > 0) {

    request_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_msg_);
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_OfflineServer.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_OfflineServer.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_msg_.Swap(&other->request_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteOfflineRequest::InitAsDefaultInstance() {
}
class WriteOfflineRequest::_Internal {
 public:
};

WriteOfflineRequest::WriteOfflineRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_OfflineServer.WriteOfflineRequest)
}
WriteOfflineRequest::WriteOfflineRequest(const WriteOfflineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  friend_id_ = from.friend_id_;
  // @@protoc_insertion_point(copy_constructor:ik_OfflineServer.WriteOfflineRequest)
}

void WriteOfflineRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteOfflineRequest_OfflineServer_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_id_ = 0;
}

WriteOfflineRequest::~WriteOfflineRequest() {
  // @@protoc_insertion_point(destructor:ik_OfflineServer.WriteOfflineRequest)
  SharedDtor();
}

void WriteOfflineRequest::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteOfflineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteOfflineRequest& WriteOfflineRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteOfflineRequest_OfflineServer_2eproto.base);
  return *internal_default_instance();
}


void WriteOfflineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_OfflineServer.WriteOfflineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_id_ = 0;
  _internal_metadata_.Clear();
}

const char* WriteOfflineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 friend_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteOfflineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_OfflineServer.WriteOfflineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 friend_id = 1;
  if (this->friend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_friend_id(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_OfflineServer.WriteOfflineRequest)
  return target;
}

size_t WriteOfflineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_OfflineServer.WriteOfflineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 friend_id = 1;
  if (this->friend_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friend_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteOfflineRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_OfflineServer.WriteOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteOfflineRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteOfflineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_OfflineServer.WriteOfflineRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_OfflineServer.WriteOfflineRequest)
    MergeFrom(*source);
  }
}

void WriteOfflineRequest::MergeFrom(const WriteOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_OfflineServer.WriteOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.friend_id() != 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
}

void WriteOfflineRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_OfflineServer.WriteOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteOfflineRequest::CopyFrom(const WriteOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_OfflineServer.WriteOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteOfflineRequest::IsInitialized() const {
  return true;
}

void WriteOfflineRequest::InternalSwap(WriteOfflineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(friend_id_, other->friend_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteOfflineRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadOfflineRequest::InitAsDefaultInstance() {
}
class ReadOfflineRequest::_Internal {
 public:
};

ReadOfflineRequest::ReadOfflineRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_OfflineServer.ReadOfflineRequest)
}
ReadOfflineRequest::ReadOfflineRequest(const ReadOfflineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  myid_ = from.myid_;
  // @@protoc_insertion_point(copy_constructor:ik_OfflineServer.ReadOfflineRequest)
}

void ReadOfflineRequest::SharedCtor() {
  myid_ = 0;
}

ReadOfflineRequest::~ReadOfflineRequest() {
  // @@protoc_insertion_point(destructor:ik_OfflineServer.ReadOfflineRequest)
  SharedDtor();
}

void ReadOfflineRequest::SharedDtor() {
}

void ReadOfflineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadOfflineRequest& ReadOfflineRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadOfflineRequest_OfflineServer_2eproto.base);
  return *internal_default_instance();
}


void ReadOfflineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_OfflineServer.ReadOfflineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  myid_ = 0;
  _internal_metadata_.Clear();
}

const char* ReadOfflineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 myid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          myid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadOfflineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_OfflineServer.ReadOfflineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 myid = 1;
  if (this->myid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_myid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_OfflineServer.ReadOfflineRequest)
  return target;
}

size_t ReadOfflineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_OfflineServer.ReadOfflineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 myid = 1;
  if (this->myid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_myid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadOfflineRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_OfflineServer.ReadOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadOfflineRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadOfflineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_OfflineServer.ReadOfflineRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_OfflineServer.ReadOfflineRequest)
    MergeFrom(*source);
  }
}

void ReadOfflineRequest::MergeFrom(const ReadOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_OfflineServer.ReadOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.myid() != 0) {
    _internal_set_myid(from._internal_myid());
  }
}

void ReadOfflineRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_OfflineServer.ReadOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOfflineRequest::CopyFrom(const ReadOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_OfflineServer.ReadOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOfflineRequest::IsInitialized() const {
  return true;
}

void ReadOfflineRequest::InternalSwap(ReadOfflineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(myid_, other->myid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOfflineRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadOfflineResponse::InitAsDefaultInstance() {
}
class ReadOfflineResponse::_Internal {
 public:
};

ReadOfflineResponse::ReadOfflineResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_OfflineServer.ReadOfflineResponse)
}
ReadOfflineResponse::ReadOfflineResponse(const ReadOfflineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_(from.msg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ik_OfflineServer.ReadOfflineResponse)
}

void ReadOfflineResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadOfflineResponse_OfflineServer_2eproto.base);
}

ReadOfflineResponse::~ReadOfflineResponse() {
  // @@protoc_insertion_point(destructor:ik_OfflineServer.ReadOfflineResponse)
  SharedDtor();
}

void ReadOfflineResponse::SharedDtor() {
}

void ReadOfflineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadOfflineResponse& ReadOfflineResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadOfflineResponse_OfflineServer_2eproto.base);
  return *internal_default_instance();
}


void ReadOfflineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_OfflineServer.ReadOfflineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.Clear();
  _internal_metadata_.Clear();
}

const char* ReadOfflineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msg();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadOfflineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_OfflineServer.ReadOfflineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes msg = 1;
  for (int i = 0, n = this->_internal_msg_size(); i < n; i++) {
    const auto& s = this->_internal_msg(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ik_OfflineServer.ReadOfflineResponse)
  return target;
}

size_t ReadOfflineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ik_OfflineServer.ReadOfflineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msg = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msg_.size());
  for (int i = 0, n = msg_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      msg_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadOfflineResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_OfflineServer.ReadOfflineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadOfflineResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadOfflineResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_OfflineServer.ReadOfflineResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_OfflineServer.ReadOfflineResponse)
    MergeFrom(*source);
  }
}

void ReadOfflineResponse::MergeFrom(const ReadOfflineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_OfflineServer.ReadOfflineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_.MergeFrom(from.msg_);
}

void ReadOfflineResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_OfflineServer.ReadOfflineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOfflineResponse::CopyFrom(const ReadOfflineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_OfflineServer.ReadOfflineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOfflineResponse::IsInitialized() const {
  return true;
}

void ReadOfflineResponse::InternalSwap(ReadOfflineResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.InternalSwap(&other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOfflineResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ik_OfflineServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ik_OfflineServer::Request* Arena::CreateMaybeMessage< ::ik_OfflineServer::Request >(Arena* arena) {
  return Arena::CreateInternal< ::ik_OfflineServer::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_OfflineServer::WriteOfflineRequest* Arena::CreateMaybeMessage< ::ik_OfflineServer::WriteOfflineRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ik_OfflineServer::WriteOfflineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_OfflineServer::ReadOfflineRequest* Arena::CreateMaybeMessage< ::ik_OfflineServer::ReadOfflineRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ik_OfflineServer::ReadOfflineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ik_OfflineServer::ReadOfflineResponse* Arena::CreateMaybeMessage< ::ik_OfflineServer::ReadOfflineResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ik_OfflineServer::ReadOfflineResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
