// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProxyServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProxyServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProxyServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProxyServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProxyServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProxyServer_2eproto;
namespace ik_Proxy {
class PoxryMessage;
class PoxryMessageDefaultTypeInternal;
extern PoxryMessageDefaultTypeInternal _PoxryMessage_default_instance_;
class PoxryResponse;
class PoxryResponseDefaultTypeInternal;
extern PoxryResponseDefaultTypeInternal _PoxryResponse_default_instance_;
}  // namespace ik_Proxy
PROTOBUF_NAMESPACE_OPEN
template<> ::ik_Proxy::PoxryMessage* Arena::CreateMaybeMessage<::ik_Proxy::PoxryMessage>(Arena*);
template<> ::ik_Proxy::PoxryResponse* Arena::CreateMaybeMessage<::ik_Proxy::PoxryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ik_Proxy {

// ===================================================================

class PoxryMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_Proxy.PoxryMessage) */ {
 public:
  PoxryMessage();
  virtual ~PoxryMessage();

  PoxryMessage(const PoxryMessage& from);
  PoxryMessage(PoxryMessage&& from) noexcept
    : PoxryMessage() {
    *this = ::std::move(from);
  }

  inline PoxryMessage& operator=(const PoxryMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoxryMessage& operator=(PoxryMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoxryMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoxryMessage* internal_default_instance() {
    return reinterpret_cast<const PoxryMessage*>(
               &_PoxryMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PoxryMessage& a, PoxryMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PoxryMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoxryMessage* New() const final {
    return CreateMaybeMessage<PoxryMessage>(nullptr);
  }

  PoxryMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoxryMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoxryMessage& from);
  void MergeFrom(const PoxryMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoxryMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_Proxy.PoxryMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyServer_2eproto);
    return ::descriptor_table_ProxyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRequestMsgFieldNumber = 2,
  };
  // bytes type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes request_msg = 2;
  void clear_request_msg();
  const std::string& request_msg() const;
  void set_request_msg(const std::string& value);
  void set_request_msg(std::string&& value);
  void set_request_msg(const char* value);
  void set_request_msg(const void* value, size_t size);
  std::string* mutable_request_msg();
  std::string* release_request_msg();
  void set_allocated_request_msg(std::string* request_msg);
  private:
  const std::string& _internal_request_msg() const;
  void _internal_set_request_msg(const std::string& value);
  std::string* _internal_mutable_request_msg();
  public:

  // @@protoc_insertion_point(class_scope:ik_Proxy.PoxryMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyServer_2eproto;
};
// -------------------------------------------------------------------

class PoxryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ik_Proxy.PoxryResponse) */ {
 public:
  PoxryResponse();
  virtual ~PoxryResponse();

  PoxryResponse(const PoxryResponse& from);
  PoxryResponse(PoxryResponse&& from) noexcept
    : PoxryResponse() {
    *this = ::std::move(from);
  }

  inline PoxryResponse& operator=(const PoxryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoxryResponse& operator=(PoxryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoxryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoxryResponse* internal_default_instance() {
    return reinterpret_cast<const PoxryResponse*>(
               &_PoxryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PoxryResponse& a, PoxryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PoxryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoxryResponse* New() const final {
    return CreateMaybeMessage<PoxryResponse>(nullptr);
  }

  PoxryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoxryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoxryResponse& from);
  void MergeFrom(const PoxryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoxryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ik_Proxy.PoxryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProxyServer_2eproto);
    return ::descriptor_table_ProxyServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kResponseMsgFieldNumber = 2,
  };
  // bytes type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes response_msg = 2;
  void clear_response_msg();
  const std::string& response_msg() const;
  void set_response_msg(const std::string& value);
  void set_response_msg(std::string&& value);
  void set_response_msg(const char* value);
  void set_response_msg(const void* value, size_t size);
  std::string* mutable_response_msg();
  std::string* release_response_msg();
  void set_allocated_response_msg(std::string* response_msg);
  private:
  const std::string& _internal_response_msg() const;
  void _internal_set_response_msg(const std::string& value);
  std::string* _internal_mutable_response_msg();
  public:

  // @@protoc_insertion_point(class_scope:ik_Proxy.PoxryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProxyServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoxryMessage

// bytes type = 1;
inline void PoxryMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PoxryMessage::type() const {
  // @@protoc_insertion_point(field_get:ik_Proxy.PoxryMessage.type)
  return _internal_type();
}
inline void PoxryMessage::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ik_Proxy.PoxryMessage.type)
}
inline std::string* PoxryMessage::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ik_Proxy.PoxryMessage.type)
  return _internal_mutable_type();
}
inline const std::string& PoxryMessage::_internal_type() const {
  return type_.GetNoArena();
}
inline void PoxryMessage::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PoxryMessage::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_Proxy.PoxryMessage.type)
}
inline void PoxryMessage::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_Proxy.PoxryMessage.type)
}
inline void PoxryMessage::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_Proxy.PoxryMessage.type)
}
inline std::string* PoxryMessage::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PoxryMessage::release_type() {
  // @@protoc_insertion_point(field_release:ik_Proxy.PoxryMessage.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PoxryMessage::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ik_Proxy.PoxryMessage.type)
}

// bytes request_msg = 2;
inline void PoxryMessage::clear_request_msg() {
  request_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PoxryMessage::request_msg() const {
  // @@protoc_insertion_point(field_get:ik_Proxy.PoxryMessage.request_msg)
  return _internal_request_msg();
}
inline void PoxryMessage::set_request_msg(const std::string& value) {
  _internal_set_request_msg(value);
  // @@protoc_insertion_point(field_set:ik_Proxy.PoxryMessage.request_msg)
}
inline std::string* PoxryMessage::mutable_request_msg() {
  // @@protoc_insertion_point(field_mutable:ik_Proxy.PoxryMessage.request_msg)
  return _internal_mutable_request_msg();
}
inline const std::string& PoxryMessage::_internal_request_msg() const {
  return request_msg_.GetNoArena();
}
inline void PoxryMessage::_internal_set_request_msg(const std::string& value) {
  
  request_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PoxryMessage::set_request_msg(std::string&& value) {
  
  request_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_Proxy.PoxryMessage.request_msg)
}
inline void PoxryMessage::set_request_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_Proxy.PoxryMessage.request_msg)
}
inline void PoxryMessage::set_request_msg(const void* value, size_t size) {
  
  request_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_Proxy.PoxryMessage.request_msg)
}
inline std::string* PoxryMessage::_internal_mutable_request_msg() {
  
  return request_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PoxryMessage::release_request_msg() {
  // @@protoc_insertion_point(field_release:ik_Proxy.PoxryMessage.request_msg)
  
  return request_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PoxryMessage::set_allocated_request_msg(std::string* request_msg) {
  if (request_msg != nullptr) {
    
  } else {
    
  }
  request_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_msg);
  // @@protoc_insertion_point(field_set_allocated:ik_Proxy.PoxryMessage.request_msg)
}

// -------------------------------------------------------------------

// PoxryResponse

// bytes type = 1;
inline void PoxryResponse::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PoxryResponse::type() const {
  // @@protoc_insertion_point(field_get:ik_Proxy.PoxryResponse.type)
  return _internal_type();
}
inline void PoxryResponse::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ik_Proxy.PoxryResponse.type)
}
inline std::string* PoxryResponse::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ik_Proxy.PoxryResponse.type)
  return _internal_mutable_type();
}
inline const std::string& PoxryResponse::_internal_type() const {
  return type_.GetNoArena();
}
inline void PoxryResponse::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PoxryResponse::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_Proxy.PoxryResponse.type)
}
inline void PoxryResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_Proxy.PoxryResponse.type)
}
inline void PoxryResponse::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_Proxy.PoxryResponse.type)
}
inline std::string* PoxryResponse::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PoxryResponse::release_type() {
  // @@protoc_insertion_point(field_release:ik_Proxy.PoxryResponse.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PoxryResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ik_Proxy.PoxryResponse.type)
}

// bytes response_msg = 2;
inline void PoxryResponse::clear_response_msg() {
  response_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PoxryResponse::response_msg() const {
  // @@protoc_insertion_point(field_get:ik_Proxy.PoxryResponse.response_msg)
  return _internal_response_msg();
}
inline void PoxryResponse::set_response_msg(const std::string& value) {
  _internal_set_response_msg(value);
  // @@protoc_insertion_point(field_set:ik_Proxy.PoxryResponse.response_msg)
}
inline std::string* PoxryResponse::mutable_response_msg() {
  // @@protoc_insertion_point(field_mutable:ik_Proxy.PoxryResponse.response_msg)
  return _internal_mutable_response_msg();
}
inline const std::string& PoxryResponse::_internal_response_msg() const {
  return response_msg_.GetNoArena();
}
inline void PoxryResponse::_internal_set_response_msg(const std::string& value) {
  
  response_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PoxryResponse::set_response_msg(std::string&& value) {
  
  response_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_Proxy.PoxryResponse.response_msg)
}
inline void PoxryResponse::set_response_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_Proxy.PoxryResponse.response_msg)
}
inline void PoxryResponse::set_response_msg(const void* value, size_t size) {
  
  response_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_Proxy.PoxryResponse.response_msg)
}
inline std::string* PoxryResponse::_internal_mutable_response_msg() {
  
  return response_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PoxryResponse::release_response_msg() {
  // @@protoc_insertion_point(field_release:ik_Proxy.PoxryResponse.response_msg)
  
  return response_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PoxryResponse::set_allocated_response_msg(std::string* response_msg) {
  if (response_msg != nullptr) {
    
  } else {
    
  }
  response_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_msg);
  // @@protoc_insertion_point(field_set_allocated:ik_Proxy.PoxryResponse.response_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_Proxy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProxyServer_2eproto
